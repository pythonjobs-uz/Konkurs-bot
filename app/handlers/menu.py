from aiogram import Router, F
from aiogram.types import CallbackQuery
from app.core.database import db
from app.keyboards.inline import *
from app.locales.translations import get_text
from app.services.user_service import UserService
from app.services.analytics_service import AnalyticsService
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "analytics")
async def analytics_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    analytics = await UserService.get_user_analytics(callback.from_user.id)
    
    text = "üìä *Sizning statistikangiz:*\n\n" if lang == "uz" else "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
    text += f"üèÜ Yaratgan konkurslar: {analytics['contests_created']}\n"
    text += f"üë• Jami qatnashchilar: {analytics['total_participants']}\n"
    text += f"üéØ Qatnashgan konkurslar: {analytics['participated_contests']}\n"
    text += f"ü•á Yutgan konkurslar: {analytics['won_contests']}\n"
    text += f"üìà Muvaffaqiyat darajasi: {analytics['success_rate']:.1f}%\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=back_to_menu_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "my_channels")
async def my_channels_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    channels = await db.get_user_channels(callback.from_user.id)
    
    if not channels:
        text = "üì∫ Sizda hali kanallar yo'q.\n\nKanal qo'shish uchun konkurs yarating." if lang == "uz" else "üì∫ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω–∫—É—Ä—Å."
    else:
        text = "üì∫ *Sizning kanallaringiz:*\n\n" if lang == "uz" else "üì∫ *–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*\n\n"
        for channel in channels:
            verified_emoji = "‚úÖ" if channel.get('is_verified') else ""
            text += f"‚Ä¢ {channel['title']} {verified_emoji}\n"
            text += f"  üë• {channel.get('member_count', 0)} a'zo\n"
            if channel.get('username'):
                text += f"  üîó @{channel['username']}\n"
            text += "\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=back_to_menu_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "referral")
async def referral_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    referral_info = await UserService.get_referral_info(callback.from_user.id)
    
    text = get_text("referral_info", lang, 
                   referral_link=referral_info['referral_link'],
                   referrals_count=referral_info['referrals_count'],
                   bonus_amount=referral_info['bonus_amount'])
    
    await callback.message.edit_text(
        text, 
        reply_markup=back_to_menu_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "notifications")
async def notifications_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    notifications = await db.get_user_notifications(callback.from_user.id)
    
    if not notifications:
        text = get_text("no_notifications", lang)
    else:
        text = get_text("notifications", lang) + "\n\n"
        for notification in notifications[:5]:
            status_emoji = "üî¥" if not notification['is_read'] else "‚úÖ"
            created_at = datetime.fromisoformat(notification['created_at'].replace('Z', '+00:00'))
            text += f"{status_emoji} *{notification['title']}*\n"
            text += f"   {notification['message'][:50]}...\n"
            text += f"   üìÖ {created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=back_to_menu_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "settings")
async def settings_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    is_premium = await UserService.check_premium_status(callback.from_user.id)
    
    text = "‚öôÔ∏è *Sozlamalar*\n\n" if lang == "uz" else "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
    text += f"üåê Til: {'O\'zbekcha' if lang == 'uz' else '–†—É—Å—Å–∫–∏–π'}\n"
    text += f"‚≠ê Status: {'Premium' if is_premium else 'Oddiy'}\n"
    text += f"üÜî ID: {user['id']}\n"
    
    if user and user.get('created_at'):
        created_at = datetime.fromisoformat(user['created_at'].replace('Z', '+00:00'))
        text += f"üìÖ Ro'yxatdan o'tgan: {created_at.strftime('%d.%m.%Y')}\n"
    
    if is_premium and user.get('premium_until'):
        premium_until = datetime.fromisoformat(user['premium_until'])
        text += f"‚è∞ Premium tugaydi: {premium_until.strftime('%d.%m.%Y')}\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=back_to_menu_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "premium")
async def premium_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    text = "‚≠ê *Premium Imkoniyatlar*\n\n" if lang == "uz" else "‚≠ê *–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏*\n\n"
    text += "üöÄ Qo'shimcha funksiyalar:\n" if lang == "uz" else "üöÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
    text += "‚Ä¢ Cheksiz konkurslar\n" if lang == "uz" else "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã\n"
    text += "‚Ä¢ Kengaytirilgan statistika\n" if lang == "uz" else "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
    text += "‚Ä¢ Maxsus dizayn\n" if lang == "uz" else "‚Ä¢ –û—Å–æ–±—ã–π –¥–∏–∑–∞–π–Ω\n"
    text += "‚Ä¢ Prioritet qo'llab-quvvatlash\n" if lang == "uz" else "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
    text += "‚Ä¢ Reklama yo'q\n" if lang == "uz" else "‚Ä¢ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
    text += "‚Ä¢ Eksport funksiyasi\n\n" if lang == "uz" else "‚Ä¢ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n"
    text += f"üí∞ Narx: {settings.PREMIUM_PRICE:,} so'm/oy" if lang == "uz" else f"üí∞ –¶–µ–Ω–∞: {settings.PREMIUM_PRICE:,} —Å—É–º/–º–µ—Å—è—Ü"
    
    await callback.message.edit_text(
        text, 
        reply_markup=premium_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "premium_features")
async def premium_features_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    text = "‚ú® *Premium Funksiyalar Batafsil*\n\n" if lang == "uz" else "‚ú® *–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ*\n\n"
    
    features = [
        ("üöÄ", "Cheksiz konkurslar yaratish", "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–æ–≤"),
        ("üìä", "Kengaytirilgan analitika va hisobotlar", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"),
        ("üé®", "Maxsus dizayn va shablon", "–û—Å–æ–±—ã–π –¥–∏–∑–∞–π–Ω –∏ —à–∞–±–ª–æ–Ω—ã"),
        ("‚ö°", "Tezkor qo'llab-quvvatlash", "–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("üì§", "Ma'lumotlarni eksport qilish", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
        ("üîî", "Maxsus bildirishnomalar", "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        ("üìà", "Real-time statistika", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"),
        ("üéØ", "Maqsadli auditoriya", "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è")
    ]
    
    for emoji, uz_text, ru_text in features:
        feature_text = uz_text if lang == "uz" else ru_text
        text += f"{emoji} {feature_text}\n"
    
    text += f"\nüíé Faqat {settings.PREMIUM_PRICE:,} so'm/oy!" if lang == "uz" else f"\nüíé –í—Å–µ–≥–æ {settings.PREMIUM_PRICE:,} —Å—É–º/–º–µ—Å—è—Ü!"
    
    await callback.message.edit_text(
        text, 
        reply_markup=premium_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "buy_premium")
async def buy_premium_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    text = "üí≥ *Premium sotib olish*\n\n" if lang == "uz" else "üí≥ *–ü–æ–∫—É–ø–∫–∞ Premium*\n\n"
    text += "To'lov usullari:\n\n" if lang == "uz" else "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n\n"
    text += "üí≥ Click/Payme\n"
    text += "üè¶ Bank kartasi\n"
    text += "üí∞ Naqd pul\n\n"
    text += "To'lov uchun admin bilan bog'laning:\n" if lang == "uz" else "–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
    text += "@konkurs_admin"
    
    await callback.message.edit_text(
        text, 
        reply_markup=back_to_menu_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "support")
async def support_callback(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    text = "üõü *Yordam*\n\n" if lang == "uz" else "üõü *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"
    text += "Savollaringiz bo'lsa, biz bilan bog'laning:\n\n" if lang == "uz" else "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º:\n\n"
    text += "üìß Email: support@konkursbot.uz\n"
    text += "üí¨ Telegram: @konkurs_support\n"
    text += "üìû Telefon: +998 90 123 45 67\n"
    text += "üïê Ish vaqti: 9:00-18:00 (Dush-Juma)" if lang == "uz" else "üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: 9:00-18:00 (–ü–Ω-–ü—Ç)"
    
    await callback.message.edit_text(
        text, 
        reply_markup=back_to_menu_keyboard(lang), 
        parse_mode="Markdown"
    )
