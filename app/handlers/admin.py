from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.core.database import db
from app.keyboards.inline import admin_panel_keyboard, back_to_menu_keyboard
from app.locales.translations import get_text
from app.services.broadcast_service import BroadcastService
from app.services.analytics_service import AnalyticsService
from config import settings
import asyncio
import logging

logger = logging.getLogger(__name__)
router = Router()

class BroadcastState(StatesGroup):
    waiting_for_message = State()

@router.message(Command("admin"))
async def admin_command(message: Message):
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    user = await db.get_user(message.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    stats = await db.get_statistics()
    
    text = "üë®‚Äçüíª *Admin Panel*\n\n"
    text += f"üìä Tizim statistikasi:\n"
    text += f"‚Ä¢ Jami foydalanuvchilar: {stats['total_users']:,}\n"
    text += f"‚Ä¢ Faol foydalanuvchilar: {stats['active_users']:,}\n"
    text += f"‚Ä¢ Premium foydalanuvchilar: {stats['premium_users']:,}\n"
    text += f"‚Ä¢ Jami konkurslar: {stats['total_contests']:,}\n"
    text += f"‚Ä¢ Faol konkurslar: {stats['active_contests']:,}\n"
    text += f"‚Ä¢ Jami qatnashchilar: {stats['total_participants']:,}\n"
    text += f"‚Ä¢ Jami g'oliblar: {stats['total_winners']:,}\n"
    
    await message.answer(
        text,
        reply_markup=admin_panel_keyboard(lang),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("Ruxsat yo'q", show_alert=True)
        return
    
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    await callback.message.edit_text(
        "üì¢ *Reklama xabarini yuboring:*\n\nMatn, rasm yoki video yuborishingiz mumkin." if lang == "uz" else "üì¢ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ.",
        reply_markup=back_to_menu_keyboard(lang),
        parse_mode="Markdown"
    )
    await state.set_state(BroadcastState.waiting_for_message)

@router.message(BroadcastState.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    user = await db.get_user(message.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    await message.answer("üì§ Reklama yuborilmoqda..." if lang == "uz" else "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã...")
    
    message_data = {}
    
    if message.photo:
        message_data = {
            'photo': message.photo[-1].file_id,
            'caption': message.caption or '',
            'parse_mode': 'HTML'
        }
    elif message.video:
        message_data = {
            'video': message.video.file_id,
            'caption': message.caption or '',
            'parse_mode': 'HTML'
        }
    else:
        message_data = {
            'text': message.text,
            'parse_mode': 'HTML'
        }
    
    result = await BroadcastService.send_broadcast(message.bot, message_data)
    
    await message.answer(
        f"‚úÖ *Reklama yuborildi!*\n\nüìä Natijalar:\n‚Ä¢ Muvaffaqiyatli: {result['success']:,}\n‚Ä¢ Xatolik: {result['failed']:,}\n‚Ä¢ Bloklangan: {result['blocked']:,}\n‚Ä¢ Jami: {result['total']:,}" if lang == "uz" else f"‚úÖ *–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {result['success']:,}\n‚Ä¢ –û—à–∏–±–æ–∫: {result['failed']:,}\n‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {result['blocked']:,}\n‚Ä¢ –í—Å–µ–≥–æ: {result['total']:,}",
        reply_markup=admin_panel_keyboard(lang),
        parse_mode="Markdown"
    )
    await state.clear()

@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("Ruxsat yo'q", show_alert=True)
        return
    
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    stats = await db.get_statistics()
    engagement = await AnalyticsService.get_user_engagement_metrics()
    
    text = "üìä *Tizim statistikasi:*\n\n" if lang == "uz" else "üìä *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
    text += f"üë• **Foydalanuvchilar:**\n"
    text += f"‚Ä¢ Jami: {stats['total_users']:,}\n"
    text += f"‚Ä¢ Faol: {stats['active_users']:,}\n"
    text += f"‚Ä¢ Premium: {stats['premium_users']:,}\n\n"
    text += f"üèÜ **Konkurslar:**\n"
    text += f"‚Ä¢ Jami: {stats['total_contests']:,}\n"
    text += f"‚Ä¢ Faol: {stats['active_contests']:,}\n\n"
    text += f"üë• **Qatnashish:**\n"
    text += f"‚Ä¢ Jami qatnashchilar: {stats['total_participants']:,}\n"
    text += f"‚Ä¢ Jami g'oliblar: {stats['total_winners']:,}\n\n"
    text += f"üìà **Faollik:**\n"
    text += f"‚Ä¢ Kunlik faol: {engagement['daily_active_users']:,}\n"
    text += f"‚Ä¢ Haftalik faol: {engagement['weekly_active_users']:,}\n"
    text += f"‚Ä¢ Oylik faol: {engagement['monthly_active_users']:,}\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=admin_panel_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "admin_analytics")
async def admin_analytics_callback(callback: CallbackQuery):
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("Ruxsat yo'q", show_alert=True)
        return
    
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    analytics = await AnalyticsService.get_system_analytics(days=7)
    
    text = "üìà *7 kunlik analitika:*\n\n" if lang == "uz" else "üìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:*\n\n"
    
    if analytics['user_growth']:
        text += "üë• **Foydalanuvchilar o'sishi:**\n"
        for day in analytics['user_growth'][-3:]:
            text += f"‚Ä¢ {day['date']}: +{day['count']}\n"
        text += "\n"
    
    if analytics['contest_creation']:
        text += "üèÜ **Konkurslar yaratilishi:**\n"
        for day in analytics['contest_creation'][-3:]:
            text += f"‚Ä¢ {day['date']}: {day['count']}\n"
        text += "\n"
    
    if analytics['top_channels']:
        text += "üîù **Top kanallar:**\n"
        for channel in analytics['top_channels'][:3]:
            text += f"‚Ä¢ {channel['title']}: {channel['contests']} konkurs\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=admin_panel_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery):
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("Ruxsat yo'q", show_alert=True)
        return
    
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    cursor = await db.connection.execute("""
        SELECT COUNT(*) as count, language_code 
        FROM users 
        GROUP BY language_code
    """)
    lang_stats = await cursor.fetchall()
    
    cursor = await db.connection.execute("""
        SELECT first_name, username, created_at 
        FROM users 
        ORDER BY created_at DESC 
        LIMIT 5
    """)
    recent_users = await cursor.fetchall()
    
    text = "üë• *Foydalanuvchilar boshqaruvi:*\n\n" if lang == "uz" else "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*\n\n"
    
    text += "üåê **Tillar bo'yicha:**\n"
    for stat in lang_stats:
        lang_name = "O'zbekcha" if stat[1] == "uz" else "–†—É—Å—Å–∫–∏–π" if stat[1] == "ru" else stat[1]
        text += f"‚Ä¢ {lang_name}: {stat[0]:,}\n"
    
    text += "\nüÜï **So'nggi foydalanuvchilar:**\n"
    for user_data in recent_users:
        name = user_data[0] or "Noma'lum"
        username = f"@{user_data[1]}" if user_data[1] else ""
        text += f"‚Ä¢ {name} {username}\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=admin_panel_keyboard(lang), 
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "admin_contests")
async def admin_contests_callback(callback: CallbackQuery):
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("Ruxsat yo'q", show_alert=True)
        return
    
    user = await db.get_user(callback.from_user.id)
    lang = user.get('language_code', 'uz') if user else 'uz'
    
    cursor = await db.connection.execute("""
        SELECT status, COUNT(*) as count 
        FROM contests 
        GROUP BY status
    """)
    status_stats = await cursor.fetchall()
    
    cursor = await db.connection.execute("""
        SELECT c.title, c.participant_count, u.first_name 
        FROM contests c
        JOIN users u ON c.owner_id = u.id
        ORDER BY c.participant_count DESC 
        LIMIT 5
    """)
    top_contests = await cursor.fetchall()
    
    text = "üèÜ *Konkurslar boshqaruvi:*\n\n" if lang == "uz" else "üèÜ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏:*\n\n"
    
    text += "üìä **Status bo'yicha:**\n"
    status_names = {
        'pending': 'Kutilmoqda',
        'active': 'Faol',
        'ended': 'Tugagan',
        'cancelled': 'Bekor qilingan'
    }
    for stat in status_stats:
        status_name = status_names.get(stat[0], stat[0])
        text += f"‚Ä¢ {status_name}: {stat[1]:,}\n"
    
    text += "\nüîù **Top konkurslar:**\n"
    for contest in top_contests:
        text += f"‚Ä¢ {contest[0][:30]}... ({contest[1]} qatnashuvchi)\n"
        text += f"  üë§ {contest[2]}\n"
    
    await callback.message.edit_text(
        text, 
        reply_markup=admin_panel_keyboard(lang), 
        parse_mode="Markdown"
    )
