from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
import asyncio

from app.services.user_service import UserService
from app.services.broadcast_service import BroadcastService
from app.services.analytics_service import AnalyticsService
from app.services.subscription_service import SubscriptionService
from app.keyboards.inline import kb
from app.locales.translations import get_text
from app.core.config import settings

router = Router()

class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_button = State()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, state: FSMContext, lang: str):
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("Ruxsat yo'q" if lang == "uz" else "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ *Reklama xabarini yuboring:*\n\n‚Ä¢ Matn\n‚Ä¢ Rasm + matn\n‚Ä¢ Video + matn\n\nKeyingi bosqichda tugma qo'shishingiz mumkin." if lang == "uz" else "üì¢ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\n‚Ä¢ –¢–µ–∫—Å—Ç\n‚Ä¢ –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç\n‚Ä¢ –í–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç\n\n–ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É.",
        reply_markup=None,
        parse_mode="Markdown"
    )
    await state.set_state(BroadcastStates.waiting_for_message)

@router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext, lang: str):
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    await state.update_data(
        message_text=message.text or message.caption,
        photo_file_id=message.photo[-1].file_id if message.photo else None,
        video_file_id=message.video.file_id if message.video else None
    )
    
    await message.answer(
        "üîò *Tugma qo'shasizmi?*\n\nFormat: Tugma matni | URL\nMasalan: Kanalga o'tish | https://t.me/channel\n\nYoki 'yo'q' deb yozing." if lang == "uz" else "üîò *–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?*\n\n–§–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | URL\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª | https://t.me/channel\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.",
        parse_mode="Markdown"
    )
    await state.set_state(BroadcastStates.waiting_for_button)

@router.message(BroadcastStates.waiting_for_button)
async def process_broadcast_button(message: Message, state: FSMContext, db: AsyncSession, lang: str):
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    broadcast_data = await state.get_data()
    button_text = None
    button_url = None
    
    if message.text.lower() not in ['yo\'q', '–Ω–µ—Ç', 'no']:
        try:
            button_text, button_url = message.text.split(' | ')
        except ValueError:
            await message.answer("Noto'g'ri format!" if lang == "uz" else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
            return
    
    broadcast_service = BroadcastService(db)
    
    await message.answer("üì§ Reklama yuborilmoqda..." if lang == "uz" else "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã...")
    
    success_count = await broadcast_service.send_advanced_broadcast(
        admin_id=message.from_user.id,
        message_text=broadcast_data.get("message_text"),
        photo_file_id=broadcast_data.get("photo_file_id"),
        video_file_id=broadcast_data.get("video_file_id"),
        button_text=button_text,
        button_url=button_url,
        bot=message.bot
    )
    
    await message.answer(
        f"‚úÖ *Reklama yuborildi!*\n\nüìä Muvaffaqiyatli: {success_count} foydalanuvchi" if lang == "uz" else f"‚úÖ *–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\nüìä –£—Å–ø–µ—à–Ω–æ: {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        reply_markup=kb.admin_panel(lang),
        parse_mode="Markdown"
    )
    await state.clear()

@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery, db: AsyncSession, lang: str):
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("Ruxsat yo'q" if lang == "uz" else "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    analytics_service = AnalyticsService(db)
    stats = await analytics_service.get_system_analytics()
    
    text = f"""üìä *Tizim statistikasi:*

üë• **Foydalanuvchilar:**
‚Ä¢ Jami: {stats['total_users']}
‚Ä¢ Faol: {stats['active_users']}
‚Ä¢ Bugun yangi: {stats['new_today']}
‚Ä¢ Premium: {stats['premium_users']}

üèÜ **Konkurslar:**
‚Ä¢ Jami: {stats['total_contests']}
‚Ä¢ Faol: {stats['active_contests']}
‚Ä¢ Tugagan: {stats['ended_contests']}

üìà **Faollik:**
‚Ä¢ Bugungi xabarlar: {stats['messages_today']}
‚Ä¢ Haftalik o'sish: {stats['weekly_growth']:.1f}%

üíæ **Tizim:**
‚Ä¢ Uptime: {stats['uptime']} soat""" if lang == "uz" else f"""üìä *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['new_today']}
‚Ä¢ Premium: {stats['premium_users']}

üèÜ **–ö–æ–Ω–∫—É—Ä—Å—ã:**
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_contests']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_contests']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['ended_contests']}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['messages_today']}
‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç: {stats['weekly_growth']:.1f}%

üíæ **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ Uptime: {stats['uptime']} —á–∞—Å–æ–≤"""
    
    await callback.message.edit_text(text, reply_markup=kb.admin_panel(lang), parse_mode="Markdown")
